# pylint: disable=invalid-name
# pylint: disable=pointless-string-statement
# pylint: disable=too-few-public-methods

import pickle
from os import rename, remove

PERSONNEL_INFO_CSV = 'Personnel Info.csv'
PERSONNEL_INFO_TXT = 'Personnel Info.txt'
AdminUsername = 'Admin'

"""
This is the module for the Personnel class, and is designed to
document which personnel in the sandbox are authorizing
disabling of printers at the sandbox
"""
AllPossibleCommands = """
Commands                                  What it does                      Syntax Example

-h        or        --help                Display All Commands              python3 Personnel.py -h
-a        or        --add                 Add new personnel type            python3 Personnel.py -a <new name> <new pin>
-u        or        --update              Update a personnel type's pin     python3 Personnel.py -u <name> <new pin>
-r        or        --remove              Remove a personnel type's pin     python3 Personnel.py -r <name>
"""

class Personnel(object):
    """
    Class for the personnel at the sandbox, and can be used to
    authorize access to the printer usage
    """
    def __init__(self, name, pin):
        """
        Args:
            name: str
                The name of the Personnel, saved for security reasons

            pin: str
                The password pin of the indiviual. This is hashed using
                a md5 algorithm and it's hash is what is used to check
        """
        self.name = name
        self.pin = Personnel._getHash(pin)
        self._save()

    def __str__(self):
        """
        magic function to convert the Personnel Object to a string
        """
        return '{0}, {1}'.format(self.name, self.pin)

    def __repr__(self):
        """
        magic function to represent the Personnel Object
        """
        return '{0}, {1}'.format(self.name, self.pin)

    def __eq__(self, pin: str):
        """
        Function to check if the pin matches the pin of this object
        """
        if not isinstance(pin, str):
            raise TypeError("Expected str, got", type(pin))

        else:
            return self.pin == self._getHash(pin)

    @staticmethod
    def _getHash(pin):
        import hashlib
        """
        Function used to return hash generated by the pin
        This is a static method as it is is independant of all
        other properties of the class

        Args:
            pin :str
                The pin that the user has given
        """
        pin = pin.encode('utf-8')
        hashVal = hashlib.md5(pin).hexdigest()

        return hashVal

    @staticmethod
    def isPinPresent(pin, personnel_list_file=PERSONNEL_INFO_TXT):
        """
        Function to check if the pin is present in the hash of the pins
        """
        hashed_pin = Personnel._getHash(pin)
        try:
            with open(personnel_list_file, 'rb') as file_object:
                return Personnel.CheckInFile(file_object, hashed_pin)
        except FileNotFoundError:
            createNewFileNow = input('File Not Found, would you like to create the file now? (y/n)')
            if createNewFileNow:
                main()

    @staticmethod
    def isUsernameAndPinPresent(username, pin, personnel_list_file=PERSONNEL_INFO_TXT):
        """
        Function to check if the username and password exist in the file
        """
        hashed_pin = Personnel._getHash(pin)
        try:
            with open(personnel_list_file, 'rb') as file_object:
                return Personnel.CheckInFileAndUsername(file_object, hashed_pin)
        except FileNotFoundError:
            print('File Not Found, returning False')
            return False

    @staticmethod
    def CheckInFileAndUsername(file_object, username, hashed_pin):
        """
        Function to verify if username and password are correct
        """
        while True:
            try:
                user_details = pickle.load(file_object)
                if username == user_details.name:
                    if hashed_pin == user_details.pin:
                        return True
            except EOFError:
                return False

    @staticmethod
    def CheckInFile(file_object, hashed_pin):
        """
        Function to iterate over each object to see if it's pin matches or not
        """
        while True:
            try:
                user_details = pickle.load(file_object)
                if hashed_pin == user_details.pin:
                    return True
            except EOFError:
                return False

    @staticmethod
    def addNewPersonnel(name, pin, adminPin):
        """
        Function to add a new personnel. It first checks if the personnel had a
        pin occour before, and asks to change it.
        """
        if not Personnel.isAdminPin(adminPin):
            raise ValueError('Admin Pin Incorrect')
        if Personnel.isUsernameAndPinPresent(name, pin):
            raise IndexError("Pin has been used before, please enter another pin")
        else:
            Personnel(name, pin)

    @staticmethod
    def isAdminPin(adminPin = None):
        if not adminPin:
            return True
        return Personnel.CheckInFileAndUsername(AdminUsername, adminPin)

    @staticmethod
    def updatePersonnel(name, new_pin, adminPin):
        if not Personnel.isAdminPin(adminPin):
            raise ValueError('Admin Pin Incorrect')
        else:
            Personnel.removePersonnel(name, adminPin)
            Personnel(name, new_pin)

    @staticmethod
    def removePersonnel(name, adminPin, personnel_list_file = PERSONNEL_INFO_TXT):
        if not isAdminPin(adminPin):
            raise ValueError('Admin Pin Incorrect')

        with open(personnel_list_file, 'rb') as file_object:
            newFileObject = open('temp' + personnel_list_file, 'wb')
            while True:
                try:
                    user_details = pickle.load(file_object)
                    if user_details.name != name:
                        pickle.dump(file=newFileObject, obj=user_details)
                except EOFError:
                    newFileObject.close()
                    remove(personnel_list_file)
                    rename(src=newFileObject, dst=personnel_list_file)

    def _save(self):
        """
        Saving the Personnel information for later usage
        """
        with open(PERSONNEL_INFO_CSV, 'a') as file_object:
            file_object.write(str(self) + '\n')

        with open(PERSONNEL_INFO_TXT, 'ab') as file_object:
            pickle.dump(self, file_object)

    @staticmethod
    def resetPersonnelFiles():
        try:
            remove(PERSONNEL_INFO_TXT)
            remove(PERSONNEL_INFO_CSV)
        except FileNotFoundError:
            pass

    @staticmethod
    def addAdmin():
        """
        Main function to display the documentation for the class defined
        """
        try:
            name = AdminUsername
            pin = input('Enter the new Admin pin: ')
            Personnel.addNewPersonnel(name, pin, None)
        except IndexError:
            pass

if __name__ == '__main__':

    from sys import argv
    print(argv)

    if '-h' in argv or '--help' in argv:
        print('The following commands are possible:')
        print(AllPossibleCommands)

    elif '-a' in argv or '--add' in argv:
        new_user = argv[argv.index('-a' if '-a' in argv else '--add' in argv)+1]
        new_pin = argv[argv.index(new_user)+1]
        print('Please confirm:')
        print('Personnel: {}'.format(new_user))
        print('Pin: {}'.format(new_pin))
        confirm = input("y/N")

        if confirm.lower() == 'y':
            expectedAdminPin = input("Please enter admin pin: ")
            Personnel.addNewPersonnel(name=new_user, pin=new_pin)
            print('User Added')
        else:
            #exit program
            print("Aborting")
            exit()

    elif '-u' in argv or '--update' in argv:
        user = argv[argv.index('-u' if '-u' in argv else '--update' in argv)+1]
        new_pin = argv[argv.index(user)+1]
        print('Please confirm:')
        print('Personnel: {}'.format(user))
        print('Pin: {}'.format(new_pin))
        confirm = input("y/N")

        if confirm.lower() == 'y':
            expectedAdminPin = input("Please enter admin pin: ")
            Personnel.updatePersonnel(name=user, new_pin=new_pin, adminPin=expectedAdminPin)
            print('Personnel Updated')
        else:
            print("Aborting")
            exit()

    elif '-r' in argv or '--remove' in argv:
        user = argv[argv.index('-u' if '-u' in argv else '--update' in argv)+1]
        print('Please confirm:')
        print('Personnel: {}'.format(user))
        confirm = input("y/N")
        if confirm.lower() == 'y':
            expectedAdminPin = input("Please enter admin pin: ")
            Personnel.removePersonnel(name=user, adminPin=expectedAdminPin)
            print('Personnel removed')
        else:
            print("Aborting")
            exit()

    else:
        print('Command not understood, here is a list of avalible commands')
        print(AllPossibleCommands)
