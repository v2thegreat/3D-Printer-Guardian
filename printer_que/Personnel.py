<<<<<<< HEAD
import pickle

class Personnel(object):
	"""Class for the personnel at the sandbox, and can be used to autorize access to the printer usage"""
	def __init__(self, name, pin):
		"""
		Args:
			name: str
				The name of the Personnel, saved for security reasons

			pin: int
				The password pin of the indiviual. This is hashed using a md5 algorithm and is used to compared with
		"""
		self.personnel_name = name
		self.pin = self._getHash(pin)
		self._save()

	def _save(self):
		"""
		Saving the Personnel information for later usage
		"""
		open('Personnel Info.csv', 'a').write(str(self) + '\n')
		with open('Personnel Info.txt', 'ab') as f:
			pickle.dump(self, f)

	def __str__(self):
		"""
		magic function to convert the Personnel Object to a string
		"""
		return f'{self.personnel_name}, {self.pin}'

	def __repr__(self):
		"""
		magic function to represent the Personnel Object
		"""
		return f'{self.personnel_name}, {self.pin}'

	def __eq__(self, pin: int):
		"""
		Function to check if the pin matches the pin of this object
		"""
		if not isinstance(pin, int):
			raise TypeError("Expected int, got", type(pin))

		else:
			return (self.pin == self._getHash(pin))

	def _getHash(self, pin):
		import hashlib
		"""
		Function used to return hash generated by the pin

		Args:
			pin :int
				The pin that the user has given
		"""
		pin = str(pin).encode('utf-8')
		hashVal = hashlib.md5(pin).hexdigest()

		return hashVal


def main():
	"""
	Main function:
		Checking if Personnel class is functioning properly
			Creating two distinct objects and checking if their pins are the same or not

	This will be later converted to unit tests

	"""
	test_Personnel_name = 'John Wick'
	test_Personnel_pin  = 1300135			#Yes, it's immature, but growing up is for old people
	p = Personnel(test_Personnel_name, test_Personnel_pin)

	test_Personnel_name = 'Alan Wolf'
	test_Personnel_pin  = 1300134
	p1 = Personnel(test_Personnel_name, test_Personnel_pin)
	print('------------------Creation test complete!----------------\n')


	print(p)
	print(str(p))
	print(p.pin == p1.pin)
	print (p == 1300135)
	print('------------------magic function test complete!----------\n')


	f = open('Personnel Info.txt', 'rb')
	te = pickle.load(f)
	print(te)
	te2 = pickle.load(f)
	print(te2)
	print('------------------file management test complete!---------\n')

if __name__ == '__main__':
	main()
=======
# pylint: disable=invalid-name
# pylint: disable=pointless-string-statement
# pylint: disable=too-few-public-methods

"""
This is the module for the Personnel class, and is designed to
document which personnel in the sandbox are authorizing
disabling of printers at the sandbox
"""
import pickle

PERSONNEL_INFO_CSV = 'Personnel Info.csv'
PERSONNEL_INFO_TXT = 'Personnel Info.txt'

class Personnel(object):
    """
    Class for the personnel at the sandbox, and can be used to
    authorize access to the printer usage
    """
    def __init__(self, name, pin):
        """
        Args:
            name: str
                The name of the Personnel, saved for security reasons

            pin: str
                The password pin of the indiviual. This is hashed using
                a md5 algorithm and it's hash is what is used to check
        """
        self.name = name
        self.pin = Personnel._getHash(pin)
        self._save()

    def __str__(self):
        """
        magic function to convert the Personnel Object to a string
        """
        return '{0}, {1}'.format(self.name, self.pin)

    def __repr__(self):
        """
        magic function to represent the Personnel Object
        """
        return '{0}, {1}'.format(self.name, self.pin)

    def __eq__(self, pin: str):
        """
        Function to check if the pin matches the pin of this object
        """
        if not isinstance(pin, str):
            raise TypeError("Expected str, got", type(pin))

        else:
            return self.pin == self._getHash(pin)

    @staticmethod
    def _getHash(pin):
        import hashlib
        """
        Function used to return hash generated by the pin
        This is a static method as it is is independant of all
        other properties of the class

        Args:
            pin :str
                The pin that the user has given
        """
        pin = pin.encode('utf-8')
        hashVal = hashlib.md5(pin).hexdigest()

        return hashVal

    @staticmethod
    def isPinPresent(pin, personnel_list_file=PERSONNEL_INFO_TXT):
        """
        Function to check if the pin is present in the hash of the pins
        """
        hashed_pin = Personnel._getHash(pin)
        try:
            with open(personnel_list_file, 'rb') as file_object:
                return CheckInFile(file_object, hashed_pin)
        except:
            return False

    @staticmethod
    def CheckInFile(self, file_object, hashed_pin):
        while True:
            try:
                user_details = pickle.load(file_object)
                if hashed_pin == user_details.pin:
                    return True
            except EOFError:
                return False

    @staticmethod
    def addNewPersonnel(name, pin):
        """
        Function to add a new personnel. It first checks if the personnel had a
        pin occour before, and asks to change it.
        """
        if Personnel.isPinPresent(pin):
            raise IndexError("Pin has been used before, please enter another pin")
        else:
            Personnel(name, pin)

    def _save(self):
        """
        Saving the Personnel information for later usage
        """
        with open(PERSONNEL_INFO_CSV, 'a') as file_object:
            file_object.write(str(self) + '\n')

        with open(PERSONNEL_INFO_TXT, 'ab') as file_object:
            pickle.dump(self, file_object)

def main():
    """
    Main function to display the documentation for the class defined
    """
    while True:
        try:
            name = input('Enter the new personnel name: ')
            pin = input('Enter the new personnel pin: ')
            # name = 'Ali Abbas'
            # pin = '4000'
            Personnel.addNewPersonnel(name, pin)
            break
        except IndexError:
            continue

if __name__ == '__main__':
    main()
>>>>>>> 3a1cfdbd1379ed174bd7ab9c0bf0eb90f2d5e359
